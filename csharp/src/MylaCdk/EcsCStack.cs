using Amazon.CDK;
using Amazon.CDK.AWS.ECS;
using Amazon.CDK.AWS.IAM;
using Amazon.CDK.AWS.RDS;
using Amazon.CDK.AWS.Route53;
using Constructs;
using static System.Net.Mime.MediaTypeNames;
using System.Runtime.ConstrainedExecution;

namespace MyLACdk
{
    // Add any properties that you want to pass to your stack
    public class EcsCStackProps : StackProps
    {
        public string ClientName { get; set; }
        public string EnvName { get; set; }
        public ICluster Cluster { get; set; }
        public IDatabaseInstance Rds { get; set; }
        public string Hosted { get; set; }
        public string CertificateArn { get; set; }
        public string Region { get; set; }
        public IHostedZone Zone { get; set; }
    }

    public class EcsCStack : Stack
    {
        // The code that defines your CF stack goes here
        public EcsCStack(Construct scope, string id, EcsCStackProps props = null)
            : base(scope, id, props)
        {
            var clientName = props.ClientName;
            string clientPrefix = $"{clientName}{props.EnvName}";

            //get pre-populated certtifcate (pem format) values from secret store - something like vault could replace this later 
            //these are used to create the EA saml provider and EA IAM SSO certificates 
            //all these will be injected as environment variables into the container
            var samlPem = Amazon.CDK.AWS.SecretsManager.Secret.FromSecretCompleteArn(this, "samlpem", "arn:aws:secretsmanager:us-east-1:654654599146:secret:SAMLProviderPem-O3bP5m");
            var samlRsaKey = Amazon.CDK.AWS.SecretsManager.Secret.FromSecretCompleteArn(this, "samlkey", "arn:aws:secretsmanager:us-east-1:654654599146:secret:SamlRsaKey-D3R6c5");
            var providerlPem = Amazon.CDK.AWS.SecretsManager.Secret.FromSecretCompleteArn(this, "providerpem", "arn:aws:secretsmanager:us-east-1:654654599146:secret:EaPem-Y32PsR");
            var providerRsaKey = Amazon.CDK.AWS.SecretsManager.Secret.FromSecretCompleteArn(this, "providerKey", "arn:aws:secretsmanager:us-east-1:654654599146:secret:EaKey-HDhRJz");

            var taskRole = new Role(this, $"{clientPrefix}-task-role", new RoleProps
            {
                AssumedBy = new ServicePrincipal("ecs-tasks.amazonaws.com"),
                RoleName = $"{clientPrefix}-task-role",
                Description = "Role that the web task definitions use to run the myLA web app"
            });

            //get the previously autogenerated db secret
            var dbSecret = Amazon.CDK.AWS.SecretsManager.Secret.FromSecretCompleteArn(this, "db-secret", props.Rds.Stack.);
            
            var repository =  Repository.fromRepositoryName(this, 'myla-dev', 'myla-dev');
            var image = ecs.ContainerImage.fromEcrRepository(repository, '1.2');
            var cert = cm.Certificate.fromCertificateArn(this, `${ props.hosted}
            -cert`, props.certificateArn);


        }
    }
}
